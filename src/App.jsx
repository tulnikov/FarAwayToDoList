import {useState} from 'react'

import './App.css'

function Logo() {
    return <h1>üèùÔ∏è Far away üß≥</h1>
}

function Form({onAddItems}) {

    const [description, setDescription] = useState('')
    const [quantity, setQuantity] = useState(1)


    function handleSubmit(e) {
        e.preventDefault()


        if (!description) return

        const newItem = {description, quantity, packed: false, id: Date.now()}
        onAddItems(newItem)

        setDescription('')
        setQuantity(1)
    }

    return <form onSubmit={handleSubmit}>
        <h3>–ß—Ç–æ –Ω—É–∂–Ω–æ –¥–ª—è üòç –ø–æ–µ–∑–¥–∫–∏?</h3>
        <select value={quantity} onChange={(e) => {
            setQuantity(+e.target.value)
        }}>
            {Array.from({length: 20},
                (_, i) => i + 1)
                .map(num => <option key={num} value={num}>{num}</option>)}

        </select>
        <input type='text'
               placeholder='–ß—Ç–æ –±–µ—Ä–µ–º?'
               value={description}
               onChange={(e) => setDescription(e.target.value)}/>
        <button>–î–æ–±–∞–≤–∏—Ç—å</button>
    </form>
}

function Item({item, onDeleteItem, onToggleItem}) {
    return <div>
        <li>
            <input type='checkbox' value={item.packed} onChange={() => onToggleItem(item.id)}/>
            < span style={item.packed ? {textDecoration: 'line-through'} : {}}>
                    {item.packed}
                {item.quantity} {item.description}
                </span>
            <button onClick={() => onDeleteItem(item.id)}>‚ùå</button>
        </li>
    </div>
}

function PackingList({items, onDeleteItem, onToggleItem, onClearList}) {
    const [sortBy, setSortBy] = useState('input')

    let sortedItems;

    if (sortBy === 'input') sortedItems = items
    if (sortBy === 'description') sortedItems = items.slice().sort((a, b) => a.description.localeCompare(b.description))
    if (sortBy === 'packed') sortedItems = items.slice().sort((a, b) => Number(a.packed) - Number(b.packed))

    return <>
        <ul>
            {sortedItems.map(item => <Item
                item={item}
                key={item.id}
                onDeleteItem={onDeleteItem}
                onToggleItem={onToggleItem}
            />)}

        </ul>

        <div>
            <select value={sortBy} onChange={(e) => setSortBy(e.target.value)}>
                <option value='input'>–°–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ –ø–æ—Ä—è–¥–∫—É</option>
                <option value='description'>–°–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é</option>
                <option value='packed'>–°–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ —Å—Ç–∞—Ç—É—Å—É —É–ø–∞–∫–æ–≤–∞–Ω–Ω–æ</option>
            </select>
            <button onClick={onClearList}>–û—á–∏—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫
            </button>
        </div>
    </>
}

function Stats({items}) {

    if (!items.length) return <footer><em>
        –ü–æ–≥–Ω–∞–ª–∏ —Å–æ–±–∏—Ä–∞—Ç—å –≤–µ—â–∏—á–∫–∏ üöÄ
    </em></footer>

    const numItems = items.length
    const numPacked = items.filter(item => item.packed).length
    const percentage = Math.round(numPacked / numItems * 100)

    return <footer>
        <em>
            {percentage === 100 ? `–£ —Ç–µ–±—è –≤—Å–µ –≥–æ—Ç–æ–≤–æ. –ü–æ–ª–µ—Ç–µ–ª–∏ ‚úàÔ∏è` :
                `–ù—É–∂–Ω–æ —Å–æ–±—Ä–∞—Ç—å ${numItems} –≤–µ—â–µ–π, –∏ —É–∂–µ —Å–æ–±—Ä–∞–Ω–Ω–æ ${numPacked} (${percentage}%)`
            }
        </em>
    </footer>

}

function App() {

    function handleAddItems(item) {
        setItems((items) => [...items, item])
    }

    function handleDeleteItem(id) {
        setItems((items) => items.filter(item => item.id !== id))
    }

    function handleToggleItem(id) {
        setItems((items) => items.map(item => item.id === id ?
            {...item, packed: !item.packed} : item))
    }

    function handleClearList() {
        const confirmed = window.confirm('–û—á–∏—Å—Ç–∏—Ç—å –≤–µ—Å—å —Å–ø–∏—Å–æ–∫?')
        if (confirmed) setItems([])
    }

    const [items, setItems] = useState([])

    return (
        <>
            <Logo/>
            <Form onAddItems={handleAddItems}/>
            <PackingList items={items}
                         onDeleteItem={handleDeleteItem}
                         onToggleItem={handleToggleItem}
                         onClearList={handleClearList}
            />
            <Stats items={items}/>
        </>)
}

export default App
